/*
 * “I pledge that this assignment has been completed in compliance with the Graduate Honor Code
 *and that I have neither given nor received any unauthorized aid on this work. Further, I did not
 *use any source codes from any other unauthorized sources, either modified or unmodified. The
 *submitted programming assignment is solely done by me and is my original work.”
 *author:Qirui Liu 
 * G36316325
 * 12/4/2015
 * */


import java.util.Random;
public class Maze {
  protected int horiz;
  protected int vert;
  protected static boolean[][] hWalls;
  protected static boolean[][] vWalls;
  private static Random random;
  public Maze(int horizontalSize, int verticalSize) {
    int i, j;
    horiz = horizontalSize;
    vert = verticalSize;
    if ((horiz < 1) || (vert < 1) || ((horiz == 1) && (vert == 1))) {
        return;                                   
      }
    
    if (vert > 1) {
      hWalls = new boolean[horiz][vert - 1];
      for (j = 0; j < vert - 1; j++) {
        for (i = 0; i < horiz; i++) {
          hWalls[i][j] = true;
        }
      }
    }
    if (horiz > 1) {
      vWalls = new boolean[horiz - 1][vert];
      for (i = 0; i < horiz - 1; i++) {
        for (j = 0; j < vert; j++) {
          vWalls[i][j] = true;
        }
      }
    }
    
    
    DisjointSets Maze = new DisjointSets(horiz * vert);
    Wall[] allWalls = new Wall[horiz * (vert-1) + (horiz-1) * vert];
    int k = 0;
    for(j = 0; j< vert - 1; j++){
    	for (i = 0; i < horiz; i++){
    		allWalls[k] = new Wall(i, j, Wall.Horizon);
    		k++;
    	}
    }
    for(i = 0; i< horiz -1; i++){
    	for(j = 0; j < vert; j++){
    		allWalls[k] = new Wall(i, j, Wall.Vertical);
    		k++;
    	}
    }
    for(int w = allWalls.length; w > 1; w--){
    	int r = randInt(w);
    	Wall tmpWall = allWalls[w-1];
    	allWalls[w-1] = allWalls[r];
    	allWalls[r] = tmpWall;
    }
    //determine cells around wall
    for(i = 0; i < allWalls.length; i++){
    	if(allWalls[i].wallType == Wall.Vertical){
    		int left = allWalls[i].x + horiz * allWalls[i].y;
    		int right = (allWalls[i].x + 1) + horiz * allWalls[i].y;
    		int l = Maze.find(left);
    		int r = Maze.find(right);
    		if(l != r){
    			Maze.union(l, r);
    			vWalls[allWalls[i].x][allWalls[i].y] = false;
    		}
    	}
    	else{
    		int top = allWalls[i].x + horiz * allWalls[i].y;
    		int down = allWalls[i].x + horiz * (allWalls[i].y + 1);
    		int t = Maze.find(top);
    		int d = Maze.find(down);
    		if (t != d){
    			Maze.union(t, d);
    			hWalls[allWalls[i].x][allWalls[i].y] = false;
    		}
    	}
    }
  }

  public String toString() {
    int i, j;
    String s = "+ ";

    // Print the top exterior wall.
    for (i = 0; i < horiz-1; i++) {
      s = s + "+-";
    }
    s = s + "+\n|";

    // Print the maze interior.
    for (j = 0; j < vert; j++) {
      // Print a row of cells and vertical walls.
      for (i = 0; i < horiz - 1; i++) {
        if (vWalls[i][j]) {
          s = s + " |";
        } else {
          s = s + "  ";
        }
      }
      s = s + " |\n+";
      if (j < vert - 1) {
        // Print a row of horizontal walls and wall corners.
        for (i = 0; i < horiz; i++) {
          if (hWalls[i][j]) {
            s = s + "-+";
          } else {
            s = s + " +";
          }
        }
        s = s + "\n|";
      }
    }

    // Print the bottom exterior wall.  (Note that the first corner has
    // already been printed.)
    for (i = 0; i < horiz-1; i++) {
      s = s + "-+";
    }
    return s + " +\n";
  }

  private static int randInt(int choices) {
    if (random == null) {       // Only executed first time randInt() is called
      random = new Random();       // Create a "Random" object with random seed
    }
    int r = random.nextInt() % choices;      // From 1 - choices to choices - 1
    if (r < 0) {
      r = -r;                                          // From 0 to choices - 1
    }
    return r;
  }
  
  public static void main(String[] args) {
    int x = 20;
    int y = 20;
    if (args.length > 0) {
      try {
        x = Integer.parseInt(args[0]);
      }
      catch (NumberFormatException e) {
        System.out.println("First argument to Simulation is not an number.");
      }
    }

    if (args.length > 1) {
      try {
        y = Integer.parseInt(args[1]);
      }
      catch (NumberFormatException e) {
        System.out.println("Second argument to Simulation is not an number.");
      }
    }

    Maze maze = new Maze(x, y);
    DFS mazesort = new DFS(x,y,vWalls,hWalls);
    BFS mazesortpath = new BFS(x,y,vWalls,hWalls);
    System.out.print(maze);
    System.out.println("----------------------------------");
    mazesort.DFSTraverse();
    System.out.println("----------------------------------");
    mazesortpath.BFSTraverse();
  }
}
